"""Move Squad functions to group

Revision ID: be807866d0c8
Revises: 
Create Date: 2018-07-15 07:34:16.794043+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
from sqlalchemy.orm import Session

from core.model import Squad, Group

revision = 'be807866d0c8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('groups', sa.Column('reminders_enabled', sa.Boolean(), nullable=False))
    op.add_column('groups', sa.Column('silence_enabled', sa.Boolean(), nullable=False))
    op.add_column('groups', sa.Column('thorns_enabled', sa.Boolean(), nullable=False))
    op.alter_column('groups', 'allow_pin_all',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('groups', 'allow_trigger_all',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('groups', 'bot_in_group',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('groups', 'welcome_enabled',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)

    # This needs a key-length but Alembic does not provide this option. Do it by raw SQL
    #op.create_unique_constraint(None, 'item', ['cw_id'])
    session.execute("ALTER TABLE item ADD UNIQUE (cw_id(25))")
    session.commit()


    op.alter_column('quest', 'approved',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('reports', 'preliminary_report',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('squad_members', 'approved',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('squads', 'hiring',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('squads', 'testing_squad',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)

    # Migrate data before dropping it!!!
    result = session.execute(text('SELECT chat_id, reminders_enabled, thorns_enabled, silence_enabled FROM squads'))
    for squad in result:
        group = session.query(Group).filter(Group.id == squad[0]).first()
        group.reminders_enabled = squad[1]
        group.thorns_enabled = squad[2]
        group.silence_enabled = squad[3]
        session.add(group)
        session.commit()


    # Now drop them...
    op.drop_column('squads', 'silence_enabled')
    op.drop_column('squads', 'reminders_enabled')
    op.drop_column('squads', 'thorns_enabled')


    op.alter_column('user_quest', 'gold',
               existing_type=mysql.BIGINT(display_width=20),
               nullable=True,
               existing_server_default=sa.text("'0'"))
    op.alter_column('users', 'is_api_profile_allowed',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('users', 'is_api_stock_allowed',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('users', 'is_api_trade_allowed',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('users', 'setting_automated_deal_report',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False,
               existing_server_default=sa.text("'1'"))
    op.alter_column('users', 'setting_automated_report',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'setting_automated_report',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('users', 'setting_automated_deal_report',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text("'1'"))
    op.alter_column('users', 'is_api_trade_allowed',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('users', 'is_api_stock_allowed',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('users', 'is_api_profile_allowed',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('user_quest', 'gold',
               existing_type=mysql.BIGINT(display_width=20),
               nullable=False,
               existing_server_default=sa.text("'0'"))
    op.add_column('squads', sa.Column('thorns_enabled', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))
    op.add_column('squads', sa.Column('reminders_enabled', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))
    op.add_column('squads', sa.Column('silence_enabled', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))

    # Migrate data before dropping it!!!
    bind = op.get_bind()
    session = Session(bind=bind)
    result = session.execute(text('SELECT chat_id, reminders_enabled, thorns_enabled, silence_enabled FROM groups'))
    for group in result:
        squad = session.query(Group).filter(Group.id == squad[0]).first()
        squad.reminders_enabled = group[1]
        squad.thorns_enabled = group[2]
        squad.silence_enabled = group[3]
        session.add(group)
        session.commit()


    op.alter_column('squads', 'testing_squad',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('squads', 'hiring',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('squad_members', 'approved',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('reports', 'preliminary_report',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('quest', 'approved',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.drop_constraint(None, 'item', type_='unique')
    op.alter_column('groups', 'welcome_enabled',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('groups', 'bot_in_group',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('groups', 'allow_trigger_all',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('groups', 'allow_pin_all',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.drop_column('groups', 'thorns_enabled')
    op.drop_column('groups', 'silence_enabled')
    op.drop_column('groups', 'reminders_enabled')

    # ### end Alembic commands ###
