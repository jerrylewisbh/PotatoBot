diff --git a/core/types.py b/core/types.py
index 641b1ec..5a75955 100644
--- a/core/types.py
+++ b/core/types.py
@@ -1,28 +1,27 @@
 # -*- coding: utf-8 -*-
+import logging
+
+from sqlalchemy.ext.hybrid import hybrid_property
+
+from config import DB
 from datetime import datetime
 from enum import Enum
-import logging
 
-from sqlalchemy import (
-    create_engine,
-    Column, Integer, DateTime, Boolean, ForeignKey, UnicodeText, BigInteger, Text,
-    Table, UniqueConstraint)
+from sqlalchemy import (BigInteger, Boolean, Column, DateTime, ForeignKey,
+                        Integer, Table, Text, UnicodeText, UniqueConstraint,
+                        create_engine)
 from sqlalchemy.dialects.mysql import DATETIME
-from sqlalchemy.ext.declarative import declarative_base
-from sqlalchemy.orm import sessionmaker, relationship, scoped_session, backref
 from sqlalchemy.exc import SQLAlchemyError
-
+from sqlalchemy.ext.declarative import declarative_base
+from sqlalchemy.orm import backref, relationship, scoped_session, sessionmaker
 from telegram import Bot
 
-from config import DB
-
 
 class AdminType(Enum):
     SUPER = 0
     FULL = 1
     GROUP = 2
 
-    '''Дополнительные группы. Не используйте их в параметре adm_type!!!'''
     WARLORD = 10
     SQUAD_CONTROLLER = 11
 
@@ -52,6 +51,8 @@ ENGINE = create_engine(DB,
 LOGGER = logging.getLogger('sqlalchemy.engine')
 Base = declarative_base()
 Session = scoped_session(sessionmaker(bind=ENGINE))
+Session()
+
 
 class UserQuestItem(Base):
     __tablename__ = 'user_quest_item'
@@ -86,38 +87,30 @@ class User(Base):
     last_name = Column(UnicodeText(250))
     date_added = Column(DateTime, default=datetime.now())
 
-    character = relationship('Character',
-                             back_populates='user',
-                             order_by='Character.date.desc()',
-                             uselist=False)
+    # We save the history of all Builds, Characters, etc. Below are also convenience functions to allow getting
+    # the latest one...
+    characters = relationship('Character', back_populates='user', order_by='Character.date.desc()', lazy='dynamic')
+    equipments = relationship('Equip', back_populates='user', order_by='Equip.date.desc()', lazy='dynamic')
+    stocks = relationship('Stock', back_populates='user', order_by='Stock.date.desc()', lazy='dynamic')
+
 
     orders_confirmed = relationship('OrderCleared', back_populates='user')
+
     member = relationship('SquadMember', back_populates='user', uselist=False)
-    equip = relationship('Equip',
-                         back_populates='user',
-                         order_by='Equip.date.desc()',
-                         uselist=False)
 
-    stock = relationship('Stock',
-                         back_populates='user',
-                         order_by='Stock.date.desc()',
-                         uselist=False)
 
-    report = relationship('Report',
-                          back_populates='user',
-                          order_by='Report.date.desc()')
 
-    build_report = relationship('BuildReport',
-                                back_populates='user',
-                                order_by='BuildReport.date.desc()')
+    report = relationship('Report', back_populates='user', order_by='Report.date.desc()')
+
+    build_report = relationship('BuildReport', back_populates='user', order_by='BuildReport.date.desc()')
 
-    profession = relationship('Profession',
-                         back_populates='user',
-                         order_by='Profession.date.desc()',
-                         uselist=False)
+    profession = relationship('Profession', back_populates='user', order_by='Profession.date.desc()', uselist=False)
 
     quests = relationship('UserQuest', back_populates='user')
 
+    hide_settings = relationship('UserStockHideSetting', back_populates='user', lazy='dynamic')
+    sniping_settings = relationship('UserExchangeOrder', back_populates='user', lazy='dynamic')
+
     # API Token and temporary stuff we need after we get an async answer...
     api_token = Column(UnicodeText(250))
     api_user_id = Column(UnicodeText(250))
@@ -126,15 +119,31 @@ class User(Base):
 
     is_api_profile_allowed = Column(Boolean())
     is_api_stock_allowed = Column(Boolean())
+    is_api_trade_allowed = Column(Boolean())
 
     setting_automated_report = Column(Boolean(), default=True)
     setting_automated_deal_report = Column(Boolean(), default=True)
+    setting_automated_hiding = Column(Boolean(), default=False)
+    setting_automated_sniping = Column(Boolean(), default=False)
 
     # Relationship
     admin_permission = relationship("Admin")
 
     ban = relationship("Ban", back_populates='user', order_by="Ban.to_date.desc()", lazy='dynamic')
 
+    @hybrid_property
+    def equip(self):
+        return self.equipments.first()
+
+    @hybrid_property
+    def stock(self):
+        return self.stocks.first()
+
+    @hybrid_property
+    def character(self):
+        return self.characters.first()
+
+    @hybrid_property
     def is_banned(self):
         # Get longest running ban still valid...
         ban = self.ban.first()
@@ -142,6 +151,22 @@ class User(Base):
             return True
         return False
 
+    @hybrid_property
+    def is_squadmember(self):
+        if self.member and self.member.approved:
+            return True
+        return False
+
+    @hybrid_property
+    def is_tester(self):
+        # Check if user is a tester based on testing-squad membership
+        if not self.is_squadmember:
+            return False
+
+        if self.member and self.member.approved and self.member.squad and self.member.squad.testing_squad:
+            return True
+        return False
+
     def __repr__(self):
         user = ''
         if self.first_name:
@@ -179,7 +204,8 @@ class UserQuest(Base):
     user_id = Column(BigInteger, ForeignKey(User.id))
 
     from_date = Column(DATETIME(fsp=6), default=datetime.utcnow)
-    forward_date = Column(DATETIME(fsp=6), nullable=False) # When was the msg originally received? servces as uniqueness-factor together with user_id
+    # When was the msg originally received? servces as uniqueness-factor together with user_id
+    forward_date = Column(DATETIME(fsp=6), nullable=False)
 
     exp = Column(BigInteger, default=0)
     level = Column(BigInteger)
@@ -291,7 +317,8 @@ class Stock(Base):
     date = Column(DATETIME(fsp=6), default=datetime.now())
     stock_type = Column(Integer)
 
-    user = relationship('User', back_populates='stock')
+    user = relationship('User', back_populates='stocks')
+
 
 class Profession(Base):
     __tablename__ = 'profession'
@@ -329,7 +356,7 @@ class Character(Base):
     # (yet) available in the API
     characterClass = Column(UnicodeText(250))
 
-    user = relationship('User', back_populates='character')
+    user = relationship('User', back_populates='characters')
 
 
 class BuildReport(Base):
@@ -399,7 +426,7 @@ class Equip(Base):
 
     equip = Column(UnicodeText(250))
 
-    user = relationship('User', back_populates='equip')
+    user = relationship('User', back_populates='equipments')
 
 
 class LocalTrigger(Base):
@@ -445,24 +472,65 @@ class Item(Base):
     __tablename__ = 'item'
 
     id = Column(BigInteger, autoincrement=True, primary_key=True)
+    cw_id = Column(UnicodeText(25), unique=True)
+
+    tradable = Column(Boolean(), default=False, nullable=False)
+    pillagable = Column(Boolean(), default=False, nullable=False)
+    weight = Column(BigInteger, default=1, nullable=False)
 
     name = Column(UnicodeText(250))
 
     user_quests = relationship(UserQuestItem)
+    user_orders = relationship('UserExchangeOrder', back_populates='item', lazy='dynamic')
+
+class UserExchangeOrder(Base):
+    __tablename__ = 'user_exchange'
+
+    id = Column(BigInteger, autoincrement=True, primary_key=True )
+
+    user_id = Column(BigInteger, ForeignKey(User.id))
+    user = relationship(User, back_populates="sniping_settings")
+
+    item_id = Column(BigInteger, ForeignKey(Item.id))
+    item = relationship(Item, back_populates='user_orders')
+
+    outstanding_order = Column(Integer, nullable=False)
+    initial_order = Column(Integer, nullable=False)
+
+
+    max_price = Column(Integer, nullable=False)
+
+class UserStockHideSetting(Base):
+    __tablename__ = 'user_autohide'
+
+    id = Column(BigInteger, autoincrement=True, primary_key=True)
+
+    user_id = Column(BigInteger, ForeignKey(User.id))
+    user = relationship(User, back_populates="hide_settings")
+
+    item_id = Column(BigInteger, ForeignKey(Item.id))
+    item = relationship(Item)
+
+    priority = Column(Integer, nullable=False)
+    max_price = Column(Integer, nullable=True)
+
+    __table_args__ = (
+        UniqueConstraint('user_id', 'priority', name='uc_usr_item'),
+    )
 
 
-def check_admin(update, session, adm_type, allowed_types=()):
+def check_admin(update, adm_type, allowed_types=()):
     allowed = False
     if adm_type == AdminType.NOT_ADMIN:
         allowed = True
     else:
-        admins = session.query(Admin).filter_by(user_id=update.message.from_user.id).all()
+        admins = Session.query(Admin).filter_by(user_id=update.message.from_user.id).all()
         for adm in admins:
             if (AdminType(adm.admin_type) in allowed_types or adm.admin_type <= adm_type.value) and \
                     (adm.admin_group in [0, update.message.chat.id] or
                      update.message.chat.id == update.message.from_user.id):
                 if adm.admin_group != 0:
-                    group = session.query(Group).filter_by(id=adm.admin_group).first()
+                    group = Session.query(Group).filter_by(id=adm.admin_group).first()
                     if group and group.bot_in_group:
                         allowed = True
                         break
@@ -472,8 +540,8 @@ def check_admin(update, session, adm_type, allowed_types=()):
     return allowed
 
 
-def check_ban(update, session):
-    ban = session.query(Ban).filter_by(user_id=update.message.from_user.id
+def check_ban(update):
+    ban = Session.query(Ban).filter_by(user_id=update.message.from_user.id
                                        if update.message else update.callback_query.from_user.id).first()
     if ban is None or ban.to_date < datetime.now():
         return True
@@ -481,7 +549,7 @@ def check_ban(update, session):
         return False
 
 
-def log(session, user_id, chat_id, func_name, args):
+def log(user_id, chat_id, func_name, args):
     if user_id:
         log_item = Log()
         log_item.date = datetime.now()
@@ -489,28 +557,29 @@ def log(session, user_id, chat_id, func_name, args):
         log_item.chat_id = chat_id
         log_item.func_name = func_name
         log_item.args = args
-        session.add(log_item)
-        session.commit()
+        Session.add(log_item)
+        Session.commit()
+        #Session.remove()
 
 
 def admin_allowed(adm_type=AdminType.FULL, ban_enable=True, allowed_types=()):
     def decorate(func):
         def wrapper(bot: Bot, update, *args, **kwargs):
-            session = Session()
             try:
-                allowed = check_admin(update, session, adm_type, allowed_types)
+                allowed = check_admin(update, adm_type, allowed_types)
                 if ban_enable:
-                    allowed &= check_ban(update, session)
+                    allowed &= check_ban(update)
                 if allowed:
                     if func.__name__ not in ['manage_all', 'trigger_show', 'user_panel', 'wrapper', 'welcome']:
-                        log(session, update.effective_user.id, update.effective_chat.id, func.__name__,
+                        log(update.effective_user.id, update.effective_chat.id, func.__name__,
                             update.message.text if update.message else None or
                             update.callback_query.data if update.callback_query else None)
-                    # Fixme: Issues a message-update even if message did not change. This raises a telegram.error.BadRequest exception!
-                    func(bot, update, session, *args, **kwargs)
+                    # Fixme: Issues a message-update even if message did not change. This
+                    # raises a telegram.error.BadRequest exception!
+                    func(bot, update, *args, **kwargs)
             except SQLAlchemyError as err:
                 bot.logger.error(str(err))
-                session.rollback()
+                Session.rollback()
         return wrapper
     return decorate
 
